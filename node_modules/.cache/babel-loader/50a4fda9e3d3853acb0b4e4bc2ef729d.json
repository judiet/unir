{"ast":null,"code":"var _jsxFileName = \"/home/julian/Dokumente/material-kit-react/src/index.js\";\n// scroll bar\nimport 'simplebar/src/simplebar.css';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { HelmetProvider } from 'react-helmet-async'; //\n// Apollo Settings\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { ApolloLink } from 'apollo-link'; // AppSync\n\nimport { createAuthLink } from 'aws-appsync-auth-link';\nimport { createHttpLink } from 'apollo-link-http'; //\n\nimport Client from 'aws-appsync';\nimport { Rehydrated } from 'aws-appsync-react';\nimport { Auth } from 'aws-amplify';\nimport awsconfig from './aws-exports'; //\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client1 = new Client({\n  uri: awsconfig.aws_appsync_graphqlEndpoint,\n  region: awsconfig.aws_appsync_region,\n  auth: {\n    type: awsconfig.aws_appsync_authenticationType,\n    credentials: () => Auth.currentCredentials(),\n    jwtToken: async () => (await Auth.currentSession()).getAccessToken().getJwtToken()\n  },\n  complexObjectsCredentials: () => Auth.currentCredentials()\n}); // jwtToken is used for AWS Cognito.\n\nconst client2 = new ApolloClient({\n  link: ApolloLink.from([createAuthLink({\n    url: awsconfig.aws_appsync_graphqlEndpoint,\n    region: awsconfig.aws_appsync_region,\n    auth: {\n      type: awsconfig.aws_appsync_authenticationType,\n      apiKey: awsconfig.aws_appsync_apiKey,\n      jwtToken: async () => (await Auth.currentSession()).getAccessToken().getJwtToken()\n    }\n  }), createHttpLink({\n    uri: awsconfig.aws_appsync_graphqlEndpoint\n  })]),\n  cache: new InMemoryCache()\n});\n\nconst WithProvider = () => {\n  /*#__PURE__*/\n  _jsxDEV(ApolloProvider, {\n    client: client2,\n    children: /*#__PURE__*/_jsxDEV(Rehydrated, {\n      children: /*#__PURE__*/_jsxDEV(HelmetProvider, {\n        children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n          children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, this);\n};\n\n_c = WithProvider;\nReactDOM.render(WithProvider, document.getElementById('root')); // If you want to enable client cache, register instead.\n\nserviceWorker.unregister(); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"WithProvider\");","map":{"version":3,"sources":["/home/julian/Dokumente/material-kit-react/src/index.js"],"names":["ReactDOM","BrowserRouter","HelmetProvider","ApolloClient","ApolloProvider","InMemoryCache","ApolloLink","createAuthLink","createHttpLink","Client","Rehydrated","Auth","awsconfig","App","serviceWorker","reportWebVitals","client1","uri","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","aws_appsync_authenticationType","credentials","currentCredentials","jwtToken","currentSession","getAccessToken","getJwtToken","complexObjectsCredentials","client2","link","from","url","apiKey","aws_appsync_apiKey","cache","WithProvider","render","document","getElementById","unregister"],"mappings":";AAAA;AACA,OAAO,6BAAP;AAEA,OAAOA,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,cAAT,QAA+B,oBAA/B,C,CAEA;AACA;;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,aAA3B,C,CACA;;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CACA;;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,SAAP,MAAsB,eAAtB,C,CACA;;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CACA;;;AACA,MAAMC,OAAO,GAAG,IAAIP,MAAJ,CAAW;AACzBQ,EAAAA,GAAG,EAAEL,SAAS,CAACM,2BADU;AAEzBC,EAAAA,MAAM,EAAEP,SAAS,CAACQ,kBAFO;AAGzBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEV,SAAS,CAACW,8BADZ;AAEJC,IAAAA,WAAW,EAAE,MAAMb,IAAI,CAACc,kBAAL,EAFf;AAGJC,IAAAA,QAAQ,EAAE,YAAY,CAAC,MAAMf,IAAI,CAACgB,cAAL,EAAP,EAA8BC,cAA9B,GAA+CC,WAA/C;AAHlB,GAHmB;AAQzBC,EAAAA,yBAAyB,EAAE,MAAMnB,IAAI,CAACc,kBAAL;AARR,CAAX,CAAhB,C,CAWA;;AACA,MAAMM,OAAO,GAAG,IAAI5B,YAAJ,CAAiB;AAC/B6B,EAAAA,IAAI,EAAE1B,UAAU,CAAC2B,IAAX,CAAgB,CACpB1B,cAAc,CAAC;AACb2B,IAAAA,GAAG,EAAEtB,SAAS,CAACM,2BADF;AAEbC,IAAAA,MAAM,EAAEP,SAAS,CAACQ,kBAFL;AAGbC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEV,SAAS,CAACW,8BADZ;AAEJY,MAAAA,MAAM,EAAEvB,SAAS,CAACwB,kBAFd;AAGJV,MAAAA,QAAQ,EAAE,YAAY,CAAC,MAAMf,IAAI,CAACgB,cAAL,EAAP,EAA8BC,cAA9B,GAA+CC,WAA/C;AAHlB;AAHO,GAAD,CADM,EAUpBrB,cAAc,CAAC;AAAES,IAAAA,GAAG,EAAEL,SAAS,CAACM;AAAjB,GAAD,CAVM,CAAhB,CADyB;AAa/BmB,EAAAA,KAAK,EAAE,IAAIhC,aAAJ;AAbwB,CAAjB,CAAhB;;AAgBA,MAAMiC,YAAY,GAAG,MAAM;AACzB;AAAA,UAAC,cAAD;AAAgB,IAAA,MAAM,EAAEP,OAAxB;AAAA,2BACE,QAAC,UAAD;AAAA,6BACE,QAAC,cAAD;AAAA,+BACE,QAAC,aAAD;AAAA,iCACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AASD,CAVD;;KAAMO,Y;AAYNtC,QAAQ,CAACuC,MAAT,CAAgBD,YAAhB,EAA8BE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA9B,E,CAEA;;AACA3B,aAAa,CAAC4B,UAAd,G,CAEA;AACA;AACA;;AACA3B,eAAe","sourcesContent":["// scroll bar\nimport 'simplebar/src/simplebar.css';\n\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { HelmetProvider } from 'react-helmet-async';\n\n//\n// Apollo Settings\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { ApolloLink } from 'apollo-link';\n// AppSync\nimport { createAuthLink } from 'aws-appsync-auth-link';\nimport { createHttpLink } from 'apollo-link-http';\n//\nimport Client from 'aws-appsync';\nimport { Rehydrated } from 'aws-appsync-react';\nimport { Auth } from 'aws-amplify';\nimport awsconfig from './aws-exports';\n//\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n// ----------------------------------------------------------------------\nconst client1 = new Client({\n  uri: awsconfig.aws_appsync_graphqlEndpoint,\n  region: awsconfig.aws_appsync_region,\n  auth: {\n    type: awsconfig.aws_appsync_authenticationType,\n    credentials: () => Auth.currentCredentials(),\n    jwtToken: async () => (await Auth.currentSession()).getAccessToken().getJwtToken()\n  },\n  complexObjectsCredentials: () => Auth.currentCredentials()\n});\n\n// jwtToken is used for AWS Cognito.\nconst client2 = new ApolloClient({\n  link: ApolloLink.from([\n    createAuthLink({\n      url: awsconfig.aws_appsync_graphqlEndpoint,\n      region: awsconfig.aws_appsync_region,\n      auth: {\n        type: awsconfig.aws_appsync_authenticationType,\n        apiKey: awsconfig.aws_appsync_apiKey,\n        jwtToken: async () => (await Auth.currentSession()).getAccessToken().getJwtToken()\n      }\n    }),\n    createHttpLink({ uri: awsconfig.aws_appsync_graphqlEndpoint }),\n  ]),\n  cache: new InMemoryCache(),\n});\n\nconst WithProvider = () => {\n  <ApolloProvider client={client2}>\n    <Rehydrated>\n      <HelmetProvider>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </HelmetProvider>\n    </Rehydrated>\n  </ApolloProvider>;\n};\n\nReactDOM.render(WithProvider, document.getElementById('root'));\n\n// If you want to enable client cache, register instead.\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}