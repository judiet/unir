type Author @model 
@auth(rules: [
    { allow: owner, ownerField: "username", queries: null }
  ]) {
    id: ID!
    name: String
    avatarUrl: String
    email: String
}

type Surveys @model
  @auth(rules: [
    { allow: owner, ownerField: "username", queries: null }
  ]) {
	id: ID!
	title: String
  authorId: ID!
	author: Author @connection(fields: ["authorId"])
	surveyCreatedAt: String
	surveyUrl: String
	status: SurveyStatus
  participants: [SurveyUser] @connection(keyName: "bySurveys", fields: ["id"])
}

enum SurveyStatus {
    DONE
    ASSIGNED
    IN_PROGRESS
}

# Create a join model and disable queries as you don't need them
# and can query through Post.editors and User.posts
type SurveyUser
  @model(queries: null)
  @key(name: "bySurveys", fields: ["surveyID", "participantID"])
  @key(name: "byParticipant", fields: ["participantID", "surveyID"]) {
  id: ID!
  surveyID: ID!
  participantID: ID!
  survey: Surveys! @connection(fields: ["surveyID"])
  participant: User! @connection(fields: ["participantID"])
}

type User @model
  @auth(rules: [
    { allow: owner, ownerField: "username", operations: [read] }
  ]) {
  id: ID!
  username: String!
  email: String! 
  surveys: [SurveyUser] @connection(keyName: "byParticipant", fields: ["id"])
}